{
	"name": "MockGifts",
	"properties": {
		"folder": {
			"name": "MockTablesToVirtuousTables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MockData_SQL_DB_Gifts",
						"type": "DatasetReference"
					},
					"name": "MockGifts",
					"description": "Row data from MockGifts table"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Virtuous_Gifts_Table",
						"type": "DatasetReference"
					},
					"name": "dboGifts",
					"description": "Virtuous Gifts Table"
				}
			],
			"transformations": [
				{
					"name": "ConversionToDestinationDataTypes",
					"description": "Derive GiftAmount as decimal\nDerive GiftDate as date"
				},
				{
					"name": "IncludeRowsWithRequiredData",
					"description": "Rows that are required to have non-NULL data are: LegacyContactId, LegacyGiftId, GiftDate, GiftAmount"
				},
				{
					"name": "DeriveAnomalyData",
					"description": "Derive IdentifyingColumnName, ColumnValue, and ConcatenatedRowData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          donor_number as string,",
				"          gift_id as integer,",
				"          first_name as string,",
				"          last_name as string,",
				"          {amount received} as string,",
				"          date as string,",
				"          {credit card type} as string,",
				"          {payment method} as string,",
				"          notes as string,",
				"          SourceFilename as string,",
				"          ETLInsertDatetime as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> MockGifts",
				"MockGifts derive(GiftAmount = coalesce(\r",
				"    toDecimal( {amount received}, 10, 4, '$######.0000')\r",
				"    , toDecimal( {amount received}, 10, 4, '######.0000')\r",
				"),",
				"          GiftDate = coalesce(\r",
				"    toDate( date, 'MM/dd/yyyy','en-US')\r",
				"    , toDate( date, 'yyyy/MM/dd','en-US')\r",
				"),",
				"          GiftType = case(\r",
				"    regexMatch({amount received}, \"^\\\\s*-\")\r",
				"        , \"Reversing Transaction\"\r",
				"    , regexMatch({payment method}, \"credit\")\r",
				"        , \"Credit\"\r",
				"    , regexMatch({payment method}, \"cash\")\r",
				"        , \"Cash\"\r",
				"    , regexMatch({payment method}, \"check\")\r",
				"        , \"Check\"\r",
				"        , \"Other\"\r",
				")\r",
				",",
				"          CreditCardType = case(\r",
				"    regexMatch({credit card type}, \"[aA][mM].*[eE][xX]\")\r",
				"        , \"AMEX\"\r",
				"    , regexMatch({credit card type}, \"Master\\\\.*Card\")\r",
				"        , \"Mastercard\"\r",
				"    , regexMatch({credit card type}, \"Disc\")\r",
				"        , \"Discover\"\r",
				"    , regexMatch({credit card type}, \"Visa\")\r",
				"        , \"Visa\"\r",
				"        , toString(null())\r",
				")) ~> ConversionToDestinationDataTypes",
				"ConversionToDestinationDataTypes filter(not(\r",
				"    or(\r",
				"        isNull(donor_number)\r",
				"        , or(\r",
				"            isNull(gift_id)\r",
				"            , or(\r",
				"                isNull(GiftAmount)\r",
				"                , isNull(GiftDate)\r",
				"            )\r",
				"        )\r",
				"    )\r",
				")) ~> IncludeRowsWithRequiredData",
				"ConversionToDestinationDataTypes derive() ~> DeriveAnomalyData",
				"IncludeRowsWithRequiredData sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          LegacyContactId as string,",
				"          LegacyGiftId as integer,",
				"          GiftType as string,",
				"          GiftDate as date,",
				"          GiftAmount as decimal(19,4),",
				"          Notes as string,",
				"          CreditCardType as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LegacyContactId = donor_number,",
				"          LegacyGiftId = gift_id,",
				"          GiftType,",
				"          GiftDate,",
				"          GiftAmount,",
				"          Notes = notes,",
				"          CreditCardType",
				"     )) ~> dboGifts"
			]
		}
	}
}