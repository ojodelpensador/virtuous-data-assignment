{
	"name": "MockContactsToVirtuousContacts",
	"properties": {
		"folder": {
			"name": "MockTablesToVirtuousTables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MockData_SQL_DB_Contacts",
						"type": "DatasetReference"
					},
					"name": "MockContactsTable",
					"description": "MockContacts data"
				},
				{
					"dataset": {
						"referenceName": "USStateAbbreviations",
						"type": "DatasetReference"
					},
					"name": "StateAbbreviations"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Virtuous_Contacts_Table",
						"type": "DatasetReference"
					},
					"name": "VirtuousContacts"
				},
				{
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "CheckingAndDeriving",
					"description": "Check/derive valid Postal code\nCheck/derive IsDeceased\nCheck/derive ContactType"
				},
				{
					"name": "LookupMockContactState",
					"description": "Match MockContact state to Valid State Abbreviations"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Number as string,",
				"          CompanyName as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Street as string,",
				"          City as string,",
				"          State as string,",
				"          Postal as string,",
				"          Phone as string,",
				"          EMail as string,",
				"          Remarks as string,",
				"          {Deceased?} as string,",
				"          SourceFilename as string,",
				"          ETLInsertDatetime as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> MockContactsTable",
				"source(output(",
				"          StateAbbreviationId as integer,",
				"          StateAbbreviation as string,",
				"          StateName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StateAbbreviations",
				"LookupMockContactState derive(UseThisPostalCode = iif(\r",
				"    and(\r",
				"        length(concat(Street,City,State))>0\r",
				"        ,and(\r",
				"            not(isNull(StateAbbreviation))\r",
				"            ,or(regexMatch(Postal, `^\\d\\d\\d\\d\\d$`),regexMatch(Postal, `^\\d\\d\\d\\d\\d-\\d\\d\\d\\d$`))\r",
				"        )\r",
				"    )\r",
				"    ,Postal\r",
				"    ,''),",
				"          UseThisIsDeceased = iif({Deceased?}=='Yes','TRUE','FALSE'),",
				"          UseThisContactType = iif(isNull(CompanyName),'Household','Organization'),",
				"          UseThisFirstName = iifNull(FirstName, \"\"),",
				"          UseThisLastName = iifNull(LastName, \"\"),",
				"          UseThisIsPrivate = iif(\r",
				"    and(\r",
				"        like(Remarks, '%anonymous%')\r",
				"        ,not(like(Remarks, '%not anonymous%'))\r",
				"    )\r",
				"    ,'TRUE'\r",
				"    ,'FALSE'\r",
				")) ~> CheckingAndDeriving",
				"MockContactsTable, StateAbbreviations lookup(State == StateAbbreviation,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupMockContactState",
				"CheckingAndDeriving sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          LegacyContactId as string,",
				"          ContactType as string,",
				"          ContactName as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          HomePhone as string,",
				"          HomeEmail as string,",
				"          Address1 as string,",
				"          City as string,",
				"          State as string,",
				"          PostalCode as string,",
				"          IsPrivate as string,",
				"          IsDeceased as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LegacyContactId = Number,",
				"          ContactType = UseThisContactType,",
				"          FirstName = UseThisFirstName,",
				"          LastName = UseThisLastName,",
				"          HomePhone = Phone,",
				"          HomeEmail = EMail,",
				"          Address1 = Street,",
				"          City,",
				"          State,",
				"          PostalCode = UseThisPostalCode,",
				"          IsPrivate = UseThisIsPrivate,",
				"          IsDeceased = UseThisIsDeceased",
				"     )) ~> VirtuousContacts",
				"CheckingAndDeriving sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}