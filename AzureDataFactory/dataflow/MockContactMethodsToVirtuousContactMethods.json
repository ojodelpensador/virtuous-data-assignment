{
	"name": "MockContactMethodsToVirtuousContactMethods",
	"properties": {
		"folder": {
			"name": "MockTablesToVirtuousTables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MockData_SQL_DB_ContactMethods",
						"type": "DatasetReference"
					},
					"name": "dboMockContactMethods",
					"description": "Data from dbo.MockContactMethods"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Virtuous_ContactMethods_Table",
						"type": "DatasetReference"
					},
					"name": "dboContactMethods",
					"description": "INSERT INTO dbo.ContactMethods"
				},
				{
					"dataset": {
						"referenceName": "AnomalyLog",
						"type": "DatasetReference"
					},
					"name": "dboAnomalyLog",
					"description": "INSERT INTO dbo.AnomalyLog"
				}
			],
			"transformations": [
				{
					"name": "ConvertToDestinationColumns",
					"description": "Build Type and Value columns for destination table"
				},
				{
					"name": "IncludeOnlyGoodRows",
					"description": "If Value is not NULL, accept the row data"
				},
				{
					"name": "DeriveAnomalyData",
					"description": "Derive IdentifyingColumnName, ColumnValue, ConcatenatedRowData"
				},
				{
					"name": "FilterOutGoodRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          donor_number as string,",
				"          Phone as string,",
				"          {E-mail} as string,",
				"          Fax as string,",
				"          SourceFilename as string,",
				"          ETLInsertDatetime as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dboMockContactMethods",
				"dboMockContactMethods derive(Type = case(\r",
				"    not(isNull(Phone))\r",
				"        , \"HomePhone\"\r",
				"    , not(isNull({E-mail}))\r",
				"        , \"HomeEmail\"\r",
				"    , not(isNull(Fax))\r",
				"        , \"Fax\"\r",
				"        , \"Unknown\"    \r",
				"),",
				"          Value = case(\r",
				"    not(isNull(Phone))\r",
				"        , Phone\r",
				"    , not(isNull({E-mail}))\r",
				"        , {E-mail}\r",
				"    , not(isNull(Fax))\r",
				"        , Fax\r",
				"        , toString(null())    \r",
				")) ~> ConvertToDestinationColumns",
				"ConvertToDestinationColumns filter(and(\r",
				"    not( isNull(Value))\r",
				"    , not( isNull(donor_number))\r",
				")) ~> IncludeOnlyGoodRows",
				"ConvertToDestinationColumns derive(IdentifyingColumnName = concat(\r",
				"    \"MockContactMethods:\"\r",
				"    , iif(\r",
				"        isNull(donor_number)\r",
				"        , \"donor_number|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        isNull(\r",
				"            coalesce(Phone, {E-mail}, Fax)\r",
				"        )\r",
				"        , \"Phone:E-mail:Fax|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomePhone\"\r",
				"            , not(\r",
				"                isNull({E-mail})\r",
				"                )\r",
				"        )\r",
				"        , \"Phone:E-mail|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomePhone\"\r",
				"            , not(\r",
				"                isNull(Fax)\r",
				"                )\r",
				"        )\r",
				"        , \"Phone:Fax|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomeEmail\"\r",
				"            , not(\r",
				"                isNull(Fax)\r",
				"            )\r",
				"        )\r",
				"        , \"E-mail:Fax|\"\r",
				"        , \"\"\r",
				"    )\r",
				"),",
				"          ColumnValue = concat(\r",
				"    iif(\r",
				"        isNull(donor_number)\r",
				"        , \"NULL|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        isNull(\r",
				"            coalesce(Phone, {E-mail}, Fax)\r",
				"        )\r",
				"        , \"NULL:NULL:NULL|\"\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomePhone\"\r",
				"            , not(\r",
				"                isNull({E-mail})\r",
				"                )\r",
				"        )\r",
				"        , concat(\r",
				"               Phone\r",
				"               ,\":\"\r",
				"               , {E-mail}\r",
				"               , \"|\"\r",
				"          )\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomePhone\"\r",
				"            , not(\r",
				"                isNull(Fax)\r",
				"                )\r",
				"        )\r",
				"        , concat(\r",
				"               Phone\r",
				"               ,\":\"\r",
				"               , Fax\r",
				"               , \"|\"\r",
				"          )\r",
				"        , \"\"\r",
				"    )\r",
				"    , iif(\r",
				"        and(\r",
				"            Type == \"HomeEmail\"\r",
				"            , not(\r",
				"                isNull(Fax)\r",
				"            )\r",
				"        )\r",
				"        , concat(\r",
				"               {E-mail}\r",
				"               ,\":\"\r",
				"               , Fax\r",
				"               , \"|\"\r",
				"          )\r",
				"        , \"\"\r",
				"    )\r",
				"),",
				"          ConcatenatedRowData = concat(\r",
				"    \"donor_number:\"\r",
				"    , coalesce( donor_number, \"NULL\")\r",
				"    , \"|Phone:\"\r",
				"    , coalesce( Phone, \"NULL\")\r",
				"    , \"|E-mail:\"\r",
				"    , coalesce( {E-mail}, \"NULL\")\r",
				"    , \"|Fax:\"\r",
				"    , coalesce( Fax, \"NULL\")\r",
				"    , \"|SourceFilename:\"\r",
				"    , coalesce( SourceFilename, \"NULL\")\r",
				")) ~> DeriveAnomalyData",
				"DeriveAnomalyData filter(coalesce( ColumnValue, \"\") != \"\") ~> FilterOutGoodRows",
				"IncludeOnlyGoodRows sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          LegacyContactId as string,",
				"          Type as string,",
				"          Value as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LegacyContactId = donor_number,",
				"          Type,",
				"          Value",
				"     )) ~> dboContactMethods",
				"FilterOutGoodRows sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          IdentifyingColumnName as string,",
				"          ColumnValue as string,",
				"          ConcatenatedRowData as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          IdentifyingColumnName,",
				"          ColumnValue,",
				"          ConcatenatedRowData",
				"     )) ~> dboAnomalyLog"
			]
		}
	}
}