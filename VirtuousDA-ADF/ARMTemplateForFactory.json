{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VirtuousDA-ADF"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bbawcom0virtuous0tmp.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage420_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/46dd7d8e-f455-43e3-9e09-78887d09f83a/resourceGroups/VirtuousDataAssignment_BBawcom/providers/Microsoft.Storage/storageAccounts/bbawcom0virtuous0tmp"
		},
		"AzureDataLakeStorage420_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"AzureSqlDatabase7_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/46dd7d8e-f455-43e3-9e09-78887d09f83a/resourceGroups/VirtuousDataAssignment_BBawcom/providers/Microsoft.Sql/servers/virtuousda-bbawcom"
		},
		"AzureSqlDatabase7_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ImportToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ContactsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ContactsCSVToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MockContactsCSVOutput": {},
									"MockContactsIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GiftsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ContactsToSQLDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GiftsToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GiftsCSVOutput": {},
									"MockGiftsDataIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ContactMethodsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GiftsToSQLDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ContactMethodsCSVToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVOutputContactMethods": {},
									"ContactMethodsIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ContactsCSVToSQLDB')]",
				"[concat(variables('factoryId'), '/dataflows/GiftsToSQLDB')]",
				"[concat(variables('factoryId'), '/dataflows/ContactMethodsCSVToSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockTablesToVirtuousTablesWithAnomalyLogging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MockContactsToVirtuousContacts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MockContactsToVirtuousContacts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MockContactsTable": {},
									"StateAbbreviations": {},
									"dboContacts": {},
									"AnomalyLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DuplicateLegacyContactIDs",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MockContactsToVirtuousContacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DuplicateLegacyContactIDs",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DuplicateLegacyContactIDs": {},
									"LoadAnomalyLogWithDuplLegacyContactId": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MockGiftsToVirtuousGifts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MockContactsToVirtuousContacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MockGiftsToVirtuousGifts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MockGifts": {},
									"dboGifts": {},
									"dboAnomalyLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MockContactsToVirtuousContacts')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/dataflows/DuplicateLegacyContactIDs')]",
				"[concat(variables('factoryId'), '/dataflows/MockGiftsToVirtuousGifts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AnomalyLog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Utility_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "IdentifyingColumnName",
						"type": "varchar"
					},
					{
						"name": "ColumnValue",
						"type": "varchar"
					},
					{
						"name": "ConcatenatedRowData",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AnomalyLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_ContactMethods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "donor_number",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "E-mail",
						"type": "varchar"
					},
					{
						"name": "Fax",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockContactMethods"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_Contacts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Number",
						"type": "varchar"
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "Street",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "Postal",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "EMail",
						"type": "varchar"
					},
					{
						"name": "Remarks",
						"type": "varchar"
					},
					{
						"name": "Deceased?",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockContacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_Gifts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "donor_number",
						"type": "varchar"
					},
					{
						"name": "gift_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "amount received",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "date",
						"type": "date"
					},
					{
						"name": "credit card type",
						"type": "varchar"
					},
					{
						"name": "payment method",
						"type": "varchar"
					},
					{
						"name": "notes",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockGifts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_ContactMethods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockContactMethods.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "donor_number",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "E-mail",
						"type": "String"
					},
					{
						"name": "Fax",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_Contacts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockContacts.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Number",
						"type": "String"
					},
					{
						"name": "Company Name",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Street",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Postal",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "E-mail",
						"type": "String"
					},
					{
						"name": "Remarks",
						"type": "String"
					},
					{
						"name": "Deceased?",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_Gifts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockGifts.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "donor_number",
						"type": "String"
					},
					{
						"name": "gift_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "amount received",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "credit card type",
						"type": "String"
					},
					{
						"name": "payment method",
						"type": "String"
					},
					{
						"name": "notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USStateAbbreviations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Utility_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StateAbbreviationId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StateAbbreviation",
						"type": "varchar"
					},
					{
						"name": "StateName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "StateAbbreviations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Virtuous_Contacts_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Virtuous_Table_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LegacyContactId",
						"type": "varchar"
					},
					{
						"name": "ContactType",
						"type": "varchar"
					},
					{
						"name": "ContactName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "HomePhone",
						"type": "varchar"
					},
					{
						"name": "HomeEmail",
						"type": "varchar"
					},
					{
						"name": "Address1",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "PostalCode",
						"type": "varchar"
					},
					{
						"name": "IsPrivate",
						"type": "varchar"
					},
					{
						"name": "IsDeceased",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Contacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContactMethodsCSVToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_ContactMethods",
								"type": "DatasetReference"
							},
							"name": "CSVOutputContactMethods",
							"description": "CSV data from MockContactMethods file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_ContactMethods",
								"type": "DatasetReference"
							},
							"name": "ContactMethodsIntoSQLDB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          donor_number as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Fax as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFilename') ~> CSVOutputContactMethods",
						"CSVOutputContactMethods sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          donor_number as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Fax as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          donor_number,",
						"          Phone,",
						"          {E-mail},",
						"          Fax,",
						"          SourceFilename",
						"     )) ~> ContactMethodsIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_ContactMethods')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_ContactMethods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContactsCSVToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsCSVOutput",
							"description": "From CSV Contacts file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsIntoSQLDB",
							"description": "Insert rows into MockContacts table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Number as string,",
						"          {Company Name} as string,",
						"          {First Name} as string,",
						"          {Last Name} as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Remarks as string,",
						"          {Deceased?} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName') ~> MockContactsCSVOutput",
						"MockContactsCSVOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Number as string,",
						"          CompanyName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          EMail as string,",
						"          Remarks as string,",
						"          {Deceased?} as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Number,",
						"          CompanyName = {Company Name},",
						"          FirstName = {First Name},",
						"          LastName = {Last Name},",
						"          Street,",
						"          City,",
						"          State,",
						"          Postal,",
						"          Phone,",
						"          EMail = {E-mail},",
						"          Remarks,",
						"          {Deceased?},",
						"          SourceFilename = SourceFileName",
						"     )) ~> MockContactsIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_Contacts')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Contacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DuplicateLegacyContactIDs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "TableLevelAnomalyLogging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Virtuous_Contacts_Table",
								"type": "DatasetReference"
							},
							"name": "DuplicateLegacyContactIDs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AnomalyLog",
								"type": "DatasetReference"
							},
							"name": "LoadAnomalyLogWithDuplLegacyContactId",
							"description": "Load AnomalyLog columns into table"
						}
					],
					"transformations": [
						{
							"name": "BuildAnomalyTableInput",
							"description": "Build IdentifyingColumnName, ColumnValue, and ConcatenatedRowData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LegacyContactId as string,",
						"          ContactType as string,",
						"          ContactName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          HomePhone as string,",
						"          HomeEmail as string,",
						"          Address1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          IsPrivate as string,",
						"          IsDeceased as string,",
						"          RANK_BY_ContactName as long",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n    C.LegacyContactId\\n    , C.ContactType\\n    , C.ContactName\\n    , C.FirstName\\n    , C.LastName\\n    , C.HomePhone\\n    , C.HomeEmail\\n    , C.Address1\\n    , C.City\\n    , C.[State]\\n    , C.PostalCode\\n    , C.IsPrivate\\n    , C.IsDeceased\\n    , ROW_NUMBER() OVER(PARTITION BY C.LegacyContactId ORDER BY C.ContactName) AS RANK_BY_ContactName\\n    FROM dbo.Contacts AS C\\n\\n    INNER JOIN (\\n        SELECT\\n            LegacyContactId \\n            , COUNT(ContactName) AS COUNT_ContactName\\n            FROM dbo.Contacts\\n\\n            GROUP BY\\n                LegacyContactId\\n\\n            HAVING\\n                COUNT(ContactName) > 1\\n    ) AS D\\n        ON (D.LegacyContactId = C.LegacyContactId)',",
						"     format: 'query') ~> DuplicateLegacyContactIDs",
						"DuplicateLegacyContactIDs derive(IdentifyingColumnName = \"Contacts.LegacyContactId|\",",
						"          ColumnValue = concat(\r",
						"    LegacyContactId\r",
						"    , \": R\"\r",
						"    , toString(RANK_BY_ContactName)\r",
						"    , \"|\"),",
						"          ConcatenatedRowData = concat(\r",
						"    \"LegacyContactId:\"\r",
						"    , LegacyContactId\r",
						"    , \"|ContactType:\"\r",
						"    , iifNull( ContactType, \"NULL\")\r",
						"    , \"|ContactName:\"\r",
						"    , iifNull( ContactName, \"NULL\")\r",
						"    , \"|FirstName:\"\r",
						"    , iifNull( FirstName, \"NULL\")\r",
						"    , \"|LastName:\"\r",
						"    , iifNull( LastName, \"NULL\")\r",
						"    , \"|HomePhone:\"\r",
						"    , iifNull( HomePhone, \"NULL\")\r",
						"    , \"|HomeEmail:\"\r",
						"    , iifNull( HomeEmail, \"NULL\")\r",
						"    , \"|Address1:\"\r",
						"    , iifNull( Address1, \"NULL\")\r",
						"    , \"|City:\"\r",
						"    , iifNull( City, \"NULL\")\r",
						"    , \"|State:\"\r",
						"    , iifNull( State, \"NULL\")\r",
						"    , \"|PostalCode:\"\r",
						"    , iifNull( PostalCode, \"NULL\")\r",
						"    , \"|IsPrivate:\"\r",
						"    , iifNull( IsPrivate, \"NULL\")\r",
						"    , \"|IsDeceased:\"\r",
						"    , iifNull( IsDeceased, \"NULL\")\r",
						")) ~> BuildAnomalyTableInput",
						"BuildAnomalyTableInput sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          IdentifyingColumnName as string,",
						"          ColumnValue as string,",
						"          ConcatenatedRowData as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          IdentifyingColumnName,",
						"          ColumnValue,",
						"          ConcatenatedRowData",
						"     )) ~> LoadAnomalyLogWithDuplLegacyContactId"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Virtuous_Contacts_Table')]",
				"[concat(variables('factoryId'), '/datasets/AnomalyLog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GiftsToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_Gifts",
								"type": "DatasetReference"
							},
							"name": "GiftsCSVOutput",
							"description": "CSV data from MockGifts file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Gifts",
								"type": "DatasetReference"
							},
							"name": "MockGiftsDataIntoSQLDB",
							"description": "TRUNCATE and INSERT into SQL DB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          donor_number as string,",
						"          gift_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          {amount received} as string,",
						"          date as string,",
						"          {credit card type} as string,",
						"          {payment method} as string,",
						"          notes as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFilename') ~> GiftsCSVOutput",
						"GiftsCSVOutput sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          donor_number as string,",
						"          gift_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          {amount received} as decimal(19,4),",
						"          date as date,",
						"          {credit card type} as string,",
						"          {payment method} as string,",
						"          notes as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          donor_number,",
						"          gift_id,",
						"          first_name,",
						"          last_name,",
						"          {amount received},",
						"          date,",
						"          {credit card type},",
						"          {payment method},",
						"          notes,",
						"          SourceFilename",
						"     )) ~> MockGiftsDataIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_Gifts')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Gifts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockContactsToVirtuousContacts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MockTablesToVirtuousTables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsTable",
							"description": "MockContacts data"
						},
						{
							"dataset": {
								"referenceName": "USStateAbbreviations",
								"type": "DatasetReference"
							},
							"name": "StateAbbreviations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Virtuous_Contacts_Table",
								"type": "DatasetReference"
							},
							"name": "dboContacts",
							"description": "Export data to dbo.Contacts table"
						},
						{
							"dataset": {
								"referenceName": "AnomalyLog",
								"type": "DatasetReference"
							},
							"name": "AnomalyLog"
						}
					],
					"transformations": [
						{
							"name": "CheckingAndDeriving",
							"description": "Check/derive valid Postal code\nCheck/derive IsDeceased\nCheck/derive ContactType"
						},
						{
							"name": "LookupMockContactState",
							"description": "Match MockContact state to Valid State Abbreviations"
						},
						{
							"name": "RemoveGoodRows",
							"description": "If IdentifyingValue is blank string or NULL, omit the row"
						},
						{
							"name": "DeriveAnomalyData",
							"description": "Concatenate row data\nTest and set identifying column(s) and value(s)"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Number as string,",
						"          CompanyName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          EMail as string,",
						"          Remarks as string,",
						"          {Deceased?} as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MockContactsTable",
						"source(output(",
						"          StateAbbreviationId as integer,",
						"          StateAbbreviation as string,",
						"          StateName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StateAbbreviations",
						"LookupMockContactState derive(UseThisPostalCode = iif(\r",
						"    and(\r",
						"        length(concat(Street,City,State))>0\r",
						"        ,and(\r",
						"            not(isNull(StateAbbreviation))\r",
						"            ,or(regexMatch(Postal, `^\\d\\d\\d\\d\\d$`),regexMatch(Postal, `^\\d\\d\\d\\d\\d-\\d\\d\\d\\d$`))\r",
						"        )\r",
						"    )\r",
						"    ,Postal\r",
						"    ,''),",
						"          UseThisIsDeceased = iif({Deceased?}=='Yes','TRUE','FALSE'),",
						"          UseThisContactType = iif(isNull(CompanyName),'Household','Organization'),",
						"          UseThisFirstName = iifNull(FirstName, \"\"),",
						"          UseThisLastName = iifNull(LastName, \"\"),",
						"          UseThisIsPrivate = iif(\r",
						"    and(\r",
						"        like(Remarks, '%anonymous%')\r",
						"        ,not(like(Remarks, '%not anonymous%'))\r",
						"    )\r",
						"    ,'TRUE'\r",
						"    ,'FALSE'\r",
						"),",
						"          UseThisContactName = concat(\r",
						"     coalesce(\r",
						"          CompanyName\r",
						"          , \"\"\r",
						"     )\r",
						"     , iif(\r",
						"          and(\r",
						"               not( isNull(CompanyName))\r",
						"               , length(\r",
						"                    coalesce(\r",
						"                         FirstName,\r",
						"                         LastName,\r",
						"                         \"\"\r",
						"                    )\r",
						"               ) > 0\r",
						"          )\r",
						"          , \": \"\r",
						"          , \"\"\r",
						"     )\r",
						"    , iif(\r",
						"        isNull(FirstName)\r",
						"        ,\"\"\r",
						"        ,concat(\r",
						"            FirstName\r",
						"            , iif(\r",
						"                isNull(LastName)\r",
						"                ,\"\"\r",
						"                ,\" \")\r",
						"        )\r",
						"    )\r",
						"    , iif(\r",
						"        isNull(LastName)\r",
						"        , \"\"\r",
						"        , LastName\r",
						"    )\r",
						")) ~> CheckingAndDeriving",
						"MockContactsTable, StateAbbreviations lookup(State == StateAbbreviation,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupMockContactState",
						"DeriveAnomalyData filter(not(",
						"    equals(",
						"    iifNull( IdentifyingValue, \"\")",
						"    , \"\"",
						"    )",
						")) ~> RemoveGoodRows",
						"CheckingAndDeriving derive(ConcatenatedRowData = concat(\r",
						"    \"Number:\"\r",
						"    , Number\r",
						"    , \"|CompanyName:\"\r",
						"    , coalesce( CompanyName, \"NULL\")\r",
						"    , \"|FirstName:\"\r",
						"    , coalesce( FirstName, \"NULL\")\r",
						"    , \"|LastName:\"\r",
						"    , coalesce( LastName, \"NULL\")\r",
						"    , \"|Street:\"\r",
						"    , coalesce( Street, \"NULL\")\r",
						"    , \"|City:\"\r",
						"    , coalesce( City, \"NULL\")\r",
						"    , \"|State:\"\r",
						"    , coalesce( State, \"NULL\")\r",
						"    , \"|Postal:\"\r",
						"    , coalesce( Postal, \"NULL\")\r",
						"    , \"|Phone:\"\r",
						"    , coalesce( Postal, \"NULL\")\r",
						"    , \"|Phone:\"\r",
						"    , coalesce( Phone, \"NULL\")\r",
						"    , \"|EMail:\"\r",
						"    , coalesce( EMail, \"NULL\")\r",
						"    , \"|Remarks:\"\r",
						"    , coalesce( Remarks, \"NULL\")\r",
						"    , \"|Deceased:\"\r",
						"    , coalesce( {Deceased?}, \"NULL\")\r",
						"    , \"|SourceFilename:\"\r",
						"    , coalesce( SourceFilename, \"NULL\")\r",
						"),",
						"          IdentifyingColumn = concat(\r",
						"    \"MockContacts:\"\r",
						"    ,iif(\r",
						"        or(\r",
						"            isNull(FirstName)\r",
						"            , isNull(LastName)\r",
						"        )\r",
						"        , \"FirstNameOrLastName|\"\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        or(\r",
						"            and(\r",
						"                equals(\r",
						"                    iifNull(UseThisPostalCode,\"\")\r",
						"                    , \"\"\r",
						"                )\r",
						"                , length(\r",
						"                    concat(\r",
						"                        iifNull(Street, \"\")\r",
						"                        , iifNull(City, \"\")\r",
						"                        , iifNull(StateAbbreviation, \"\")\r",
						"                    )\r",
						"                ) > 0\r",
						"            )\r",
						"            , not(\r",
						"            equals(Postal, UseThisPostalCode)\r",
						"            )\r",
						"        )\r",
						"        , \"Postal|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        UseThisIsPrivate == \"TRUE\"\r",
						"        , \"Remarks|\"\r",
						"        , \"\")\r",
						"),",
						"          IdentifyingValue = concat(\r",
						"    iif(\r",
						"        or(\r",
						"            isNull(FirstName)\r",
						"            , isNull(LastName)\r",
						"        )\r",
						"        , concat(\r",
						"            iifNull(FirstName, \"NULL\")\r",
						"            , \":\"\r",
						"            , iifNull(LastName, \"NULL\")\r",
						"            , \"|\"\r",
						"        )\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        or(\r",
						"            and(\r",
						"                equals(\r",
						"                    iifNull(UseThisPostalCode,\"\")\r",
						"                    , \"\"\r",
						"                )\r",
						"                , length(\r",
						"                    concat(\r",
						"                        iifNull(Street, \"\")\r",
						"                        , iifNull(City, \"\")\r",
						"                        , iifNull(StateAbbreviation, \"\")\r",
						"                    )\r",
						"                ) > 0\r",
						"            )\r",
						"            , not(\r",
						"            equals(Postal, UseThisPostalCode)\r",
						"            )\r",
						"        )\r",
						"        , concat(\r",
						"            iifNull(Postal, \"NULL\")\r",
						"            , \"|\"\r",
						"        )\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        UseThisIsPrivate == \"TRUE\"\r",
						"        , iifNull(Remarks, \"NULL\")\r",
						"        , \"\"\r",
						"    )\r",
						")) ~> DeriveAnomalyData",
						"CheckingAndDeriving sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          LegacyContactId as string,",
						"          ContactType as string,",
						"          ContactName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          HomePhone as string,",
						"          HomeEmail as string,",
						"          Address1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          IsPrivate as string,",
						"          IsDeceased as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LegacyContactId = Number,",
						"          ContactType = UseThisContactType,",
						"          ContactName = UseThisContactName,",
						"          FirstName = UseThisFirstName,",
						"          LastName = UseThisLastName,",
						"          HomePhone = Phone,",
						"          HomeEmail = EMail,",
						"          Address1 = Street,",
						"          City,",
						"          State,",
						"          PostalCode = UseThisPostalCode,",
						"          IsPrivate = UseThisIsPrivate,",
						"          IsDeceased = UseThisIsDeceased",
						"     )) ~> dboContacts",
						"RemoveGoodRows sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          IdentifyingColumnName as string,",
						"          ColumnValue as string,",
						"          ConcatenatedRowData as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          IdentifyingColumnName = IdentifyingColumn,",
						"          ColumnValue = IdentifyingValue,",
						"          ConcatenatedRowData",
						"     )) ~> AnomalyLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Contacts')]",
				"[concat(variables('factoryId'), '/datasets/USStateAbbreviations')]",
				"[concat(variables('factoryId'), '/datasets/Virtuous_Contacts_Table')]",
				"[concat(variables('factoryId'), '/datasets/AnomalyLog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureDataLakeStorage420')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureDataLakeStorage420_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureDataLakeStorage420_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase7')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase7_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase7_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Virtuous_Gifts_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Virtuous_Table_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LegacyContactId",
						"type": "varchar"
					},
					{
						"name": "LegacyGiftId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GiftType",
						"type": "varchar"
					},
					{
						"name": "GiftDate",
						"type": "date"
					},
					{
						"name": "GiftAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Notes",
						"type": "varchar"
					},
					{
						"name": "CreditCardType",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Gifts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockGiftsToVirtuousGifts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MockTablesToVirtuousTables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Gifts",
								"type": "DatasetReference"
							},
							"name": "MockGifts",
							"description": "Row data from MockGifts table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Virtuous_Gifts_Table",
								"type": "DatasetReference"
							},
							"name": "dboGifts",
							"description": "Virtuous Gifts Table"
						},
						{
							"dataset": {
								"referenceName": "AnomalyLog",
								"type": "DatasetReference"
							},
							"name": "dboAnomalyLog",
							"description": "Insert Anomaly data"
						}
					],
					"transformations": [
						{
							"name": "ConversionToDestinationDataTypes",
							"description": "Derive GiftAmount as decimal\nDerive GiftDate as date"
						},
						{
							"name": "IncludeRowsWithRequiredData",
							"description": "Rows that are required to have non-NULL data are: LegacyContactId, LegacyGiftId, GiftDate, GiftAmount"
						},
						{
							"name": "DeriveAnomalyData",
							"description": "Derive IdentifyingColumnName, ColumnValue, and ConcatenatedRowData"
						},
						{
							"name": "RemoveGoodRows",
							"description": "If ColumnValue is empty/NULL, then filter it out"
						}
					],
					"scriptLines": [
						"source(output(",
						"          donor_number as string,",
						"          gift_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          {amount received} as string,",
						"          date as string,",
						"          {credit card type} as string,",
						"          {payment method} as string,",
						"          notes as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MockGifts",
						"MockGifts derive(GiftAmount = coalesce(\r",
						"    toDecimal( {amount received}, 10, 4, '$######.0000')\r",
						"    , toDecimal( {amount received}, 10, 4, '######.0000')\r",
						"),",
						"          GiftDate = coalesce(\r",
						"    toDate( date, 'MM/dd/yyyy','en-US')\r",
						"    , toDate( date, 'yyyy/MM/dd','en-US')\r",
						"),",
						"          GiftType = case(\r",
						"    regexMatch({amount received}, \"^\\\\s*-\")\r",
						"        , \"Reversing Transaction\"\r",
						"    , regexMatch({payment method}, \"credit\")\r",
						"        , \"Credit\"\r",
						"    , regexMatch({payment method}, \"cash\")\r",
						"        , \"Cash\"\r",
						"    , regexMatch({payment method}, \"check\")\r",
						"        , \"Check\"\r",
						"        , \"Other\"\r",
						")\r",
						",",
						"          CreditCardType = case(\r",
						"    regexMatch({credit card type}, \"[aA][mM].*[eE][xX]\")\r",
						"        , \"AMEX\"\r",
						"    , regexMatch({credit card type}, \"[mM][aA][sS][tT][eE][rR].*[cC][aA][rR][dD]\")\r",
						"        , \"Mastercard\"\r",
						"    , regexMatch({credit card type}, \"[dD][iI][sS][cC]\")\r",
						"        , \"Discover\"\r",
						"    , regexMatch({credit card type}, \"[vV][iI][sS][aA]\")\r",
						"        , \"Visa\"\r",
						"        , toString(null())\r",
						")) ~> ConversionToDestinationDataTypes",
						"ConversionToDestinationDataTypes filter(not(\r",
						"    or(\r",
						"        isNull(donor_number)\r",
						"        , or(\r",
						"            isNull(gift_id)\r",
						"            , or(\r",
						"                isNull(GiftAmount)\r",
						"                , isNull(GiftDate)\r",
						"            )\r",
						"        )\r",
						"    )\r",
						")) ~> IncludeRowsWithRequiredData",
						"ConversionToDestinationDataTypes derive(IdentifyingColumnName = concat(\r",
						"    \"MockGifts:\"\r",
						"    , iif(\r",
						"        isNull(donor_number)\r",
						"        , \"donor_number|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(gift_id)\r",
						"        , \"gift_id|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(GiftAmount)\r",
						"        , \"amount received|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(GiftDate)\r",
						"        , \"date|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        and(\r",
						"            GiftType == \"Credit\"\r",
						"            , coalesce(CreditCardType,\"\") == \"\"\r",
						"        )\r",
						"        , \"payment method:credit card type|\"\r",
						"        , \"\"\r",
						"    )\r",
						"),",
						"          ColumnValue = concat(\r",
						"    iif(\r",
						"        isNull(donor_number)\r",
						"        , \"NULL|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(gift_id)\r",
						"        , \"NULL|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(GiftAmount)\r",
						"        , \"NULL|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        isNull(GiftDate)\r",
						"        , \"NULL|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        and(\r",
						"            GiftType == \"Credit\"\r",
						"            , coalesce(CreditCardType,\"\") == \"\"\r",
						"        )\r",
						"        , concat(\r",
						"            {payment method}\r",
						"            , \":\"\r",
						"            , {credit card type}\r",
						"        )\r",
						"        , \"\"\r",
						"    )\r",
						"),",
						"          ConcatenatedRowData = concat(\r",
						"    \"donor_number:\"\r",
						"    , coalesce( donor_number, \"NULL\")\r",
						"    , \"|gift_id:\"\r",
						"    , coalesce( toString(gift_id), \"NULL\")\r",
						"    , \"|first_name:\"\r",
						"    , coalesce( first_name, \"NULL\")\r",
						"    , \"|last_name:\"\r",
						"    , coalesce( last_name, \"NULL\")\r",
						"    , \"|amount received:\"\r",
						"    , coalesce( {amount received}, \"NULL\")\r",
						"    , \"|date:\"\r",
						"    , coalesce( date, \"NULL\")\r",
						"    , \"|credit card type:\"\r",
						"    , coalesce( {credit card type}, \"NULL\")\r",
						"    , \"|payment method:\"\r",
						"    , coalesce( {payment method}, \"NULL\")\r",
						"    , \"|notes:\"\r",
						"    , coalesce( notes, \"NULL\")\r",
						"    , \"|SourceFilename:\"\r",
						"    , coalesce( SourceFilename, \"NULL\")\r",
						")) ~> DeriveAnomalyData",
						"DeriveAnomalyData filter(coalesce( ColumnValue, \"\") != \"\") ~> RemoveGoodRows",
						"IncludeRowsWithRequiredData sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          LegacyContactId as string,",
						"          LegacyGiftId as integer,",
						"          GiftType as string,",
						"          GiftDate as date,",
						"          GiftAmount as decimal(19,4),",
						"          Notes as string,",
						"          CreditCardType as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LegacyContactId = donor_number,",
						"          LegacyGiftId = gift_id,",
						"          GiftType,",
						"          GiftDate,",
						"          GiftAmount,",
						"          Notes = notes,",
						"          CreditCardType",
						"     )) ~> dboGifts",
						"RemoveGoodRows sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          IdentifyingColumnName as string,",
						"          ColumnValue as string,",
						"          ConcatenatedRowData as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          IdentifyingColumnName,",
						"          ColumnValue,",
						"          ConcatenatedRowData",
						"     )) ~> dboAnomalyLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Gifts')]",
				"[concat(variables('factoryId'), '/datasets/Virtuous_Gifts_Table')]",
				"[concat(variables('factoryId'), '/datasets/AnomalyLog')]"
			]
		}
	]
}