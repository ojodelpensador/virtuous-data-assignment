{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "VirtuousDA-ADF"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bbawcom0virtuous0tmp.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage420_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/46dd7d8e-f455-43e3-9e09-78887d09f83a/resourceGroups/VirtuousDataAssignment_BBawcom/providers/Microsoft.Storage/storageAccounts/bbawcom0virtuous0tmp"
		},
		"AzureDataLakeStorage420_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"AzureSqlDatabase7_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/46dd7d8e-f455-43e3-9e09-78887d09f83a/resourceGroups/VirtuousDataAssignment_BBawcom/providers/Microsoft.Sql/servers/virtuousda-bbawcom"
		},
		"AzureSqlDatabase7_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ImportToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ContactsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ContactsCSVToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MockContactsCSVOutput": {},
									"MockContactsIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GiftsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ContactsToSQLDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GiftsToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GiftsCSVOutput": {},
									"MockGiftsDataIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ContactMethodsToSQLDB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GiftsToSQLDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ContactMethodsCSVToSQLDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVOutputContactMethods": {},
									"ContactMethodsIntoSQLDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ContactsCSVToSQLDB')]",
				"[concat(variables('factoryId'), '/dataflows/GiftsToSQLDB')]",
				"[concat(variables('factoryId'), '/dataflows/ContactMethodsCSVToSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockTablesToVirtuousTablesWithAnomalyLogging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MockContactsToVirtuousContacts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MockContactsToVirtuousContacts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MockContactsTable": {},
									"StateAbbreviations": {},
									"VirtuousContacts": {},
									"AnomalyLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MockContactsToVirtuousContacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AnomalyLog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Virtuous_Table_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "IdentifyingColumnName",
						"type": "varchar"
					},
					{
						"name": "ColumnValue",
						"type": "varchar"
					},
					{
						"name": "ConcatenatedRowData",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AnomalyLog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_ContactMethods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "donor_number",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "E-mail",
						"type": "varchar"
					},
					{
						"name": "Fax",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockContactMethods"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_Contacts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Number",
						"type": "varchar"
					},
					{
						"name": "CompanyName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "Street",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "Postal",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "EMail",
						"type": "varchar"
					},
					{
						"name": "Remarks",
						"type": "varchar"
					},
					{
						"name": "Deceased?",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockContacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_SQL_DB_Gifts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "donor_number",
						"type": "varchar"
					},
					{
						"name": "gift_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "amount received",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "date",
						"type": "date"
					},
					{
						"name": "credit card type",
						"type": "varchar"
					},
					{
						"name": "payment method",
						"type": "varchar"
					},
					{
						"name": "notes",
						"type": "varchar"
					},
					{
						"name": "SourceFilename",
						"type": "varchar"
					},
					{
						"name": "ETLInsertDatetime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "MockGifts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_ContactMethods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockContactMethods.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "donor_number",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "E-mail",
						"type": "String"
					},
					{
						"name": "Fax",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_Contacts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockContacts.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Number",
						"type": "String"
					},
					{
						"name": "Company Name",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Street",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Postal",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "E-mail",
						"type": "String"
					},
					{
						"name": "Remarks",
						"type": "String"
					},
					{
						"name": "Deceased?",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockData_TabDelimited_Gifts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Mock_DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MockGifts.csv",
						"folderPath": "MockInputData/CSV",
						"fileSystem": "data-assignment"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "donor_number",
						"type": "String"
					},
					{
						"name": "gift_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "amount received",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "credit card type",
						"type": "String"
					},
					{
						"name": "payment method",
						"type": "String"
					},
					{
						"name": "notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/USStateAbbreviations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Virtuous_Table_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StateAbbreviationId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StateAbbreviation",
						"type": "varchar"
					},
					{
						"name": "StateName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "StateAbbreviations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Virtuous_Contacts_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Virtuous_Table_Datasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LegacyContactId",
						"type": "varchar"
					},
					{
						"name": "ContactType",
						"type": "varchar"
					},
					{
						"name": "ContactName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "HomePhone",
						"type": "varchar"
					},
					{
						"name": "HomeEmail",
						"type": "varchar"
					},
					{
						"name": "Address1",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "PostalCode",
						"type": "varchar"
					},
					{
						"name": "IsPrivate",
						"type": "varchar"
					},
					{
						"name": "IsDeceased",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Contacts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContactMethodsCSVToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_ContactMethods",
								"type": "DatasetReference"
							},
							"name": "CSVOutputContactMethods",
							"description": "CSV data from MockContactMethods file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_ContactMethods",
								"type": "DatasetReference"
							},
							"name": "ContactMethodsIntoSQLDB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          donor_number as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Fax as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFilename') ~> CSVOutputContactMethods",
						"CSVOutputContactMethods sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          donor_number as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Fax as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          donor_number,",
						"          Phone,",
						"          {E-mail},",
						"          Fax,",
						"          SourceFilename",
						"     )) ~> ContactMethodsIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_ContactMethods')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_ContactMethods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContactsCSVToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsCSVOutput",
							"description": "From CSV Contacts file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsIntoSQLDB",
							"description": "Insert rows into MockContacts table"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Number as string,",
						"          {Company Name} as string,",
						"          {First Name} as string,",
						"          {Last Name} as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          {E-mail} as string,",
						"          Remarks as string,",
						"          {Deceased?} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFileName') ~> MockContactsCSVOutput",
						"MockContactsCSVOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Number as string,",
						"          CompanyName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          EMail as string,",
						"          Remarks as string,",
						"          {Deceased?} as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Number,",
						"          CompanyName = {Company Name},",
						"          FirstName = {First Name},",
						"          LastName = {Last Name},",
						"          Street,",
						"          City,",
						"          State,",
						"          Postal,",
						"          Phone,",
						"          EMail = {E-mail},",
						"          Remarks,",
						"          {Deceased?},",
						"          SourceFilename = SourceFileName",
						"     )) ~> MockContactsIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_Contacts')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Contacts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GiftsToSQLDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CSVToSQLDB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_TabDelimited_Gifts",
								"type": "DatasetReference"
							},
							"name": "GiftsCSVOutput",
							"description": "CSV data from MockGifts file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Gifts",
								"type": "DatasetReference"
							},
							"name": "MockGiftsDataIntoSQLDB",
							"description": "TRUNCATE and INSERT into SQL DB"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          donor_number as string,",
						"          gift_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          {amount received} as string,",
						"          date as string,",
						"          {credit card type} as string,",
						"          {payment method} as string,",
						"          notes as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'SourceFilename') ~> GiftsCSVOutput",
						"GiftsCSVOutput sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          donor_number as string,",
						"          gift_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          {amount received} as decimal(19,4),",
						"          date as date,",
						"          {credit card type} as string,",
						"          {payment method} as string,",
						"          notes as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          donor_number,",
						"          gift_id,",
						"          first_name,",
						"          last_name,",
						"          {amount received},",
						"          date,",
						"          {credit card type},",
						"          {payment method},",
						"          notes,",
						"          SourceFilename",
						"     )) ~> MockGiftsDataIntoSQLDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_TabDelimited_Gifts')]",
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Gifts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MockContactsToVirtuousContacts')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MockTablesToVirtuousTables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MockData_SQL_DB_Contacts",
								"type": "DatasetReference"
							},
							"name": "MockContactsTable",
							"description": "MockContacts data"
						},
						{
							"dataset": {
								"referenceName": "USStateAbbreviations",
								"type": "DatasetReference"
							},
							"name": "StateAbbreviations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Virtuous_Contacts_Table",
								"type": "DatasetReference"
							},
							"name": "VirtuousContacts"
						},
						{
							"dataset": {
								"referenceName": "AnomalyLog",
								"type": "DatasetReference"
							},
							"name": "AnomalyLog"
						}
					],
					"transformations": [
						{
							"name": "CheckingAndDeriving",
							"description": "Check/derive valid Postal code\nCheck/derive IsDeceased\nCheck/derive ContactType"
						},
						{
							"name": "LookupMockContactState",
							"description": "Match MockContact state to Valid State Abbreviations"
						},
						{
							"name": "RemoveGoodRows",
							"description": "If IdentifyingColumn is blank string or NULL, omit the row"
						},
						{
							"name": "DeriveAnomalyData",
							"description": "Concatenate row data\nTest and set identifying column(s) and value(s)"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Number as string,",
						"          CompanyName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Street as string,",
						"          City as string,",
						"          State as string,",
						"          Postal as string,",
						"          Phone as string,",
						"          EMail as string,",
						"          Remarks as string,",
						"          {Deceased?} as string,",
						"          SourceFilename as string,",
						"          ETLInsertDatetime as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MockContactsTable",
						"source(output(",
						"          StateAbbreviationId as integer,",
						"          StateAbbreviation as string,",
						"          StateName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StateAbbreviations",
						"LookupMockContactState derive(UseThisPostalCode = iif(\r",
						"    and(\r",
						"        length(concat(Street,City,State))>0\r",
						"        ,and(\r",
						"            not(isNull(StateAbbreviation))\r",
						"            ,or(regexMatch(Postal, `^\\d\\d\\d\\d\\d$`),regexMatch(Postal, `^\\d\\d\\d\\d\\d-\\d\\d\\d\\d$`))\r",
						"        )\r",
						"    )\r",
						"    ,Postal\r",
						"    ,''),",
						"          UseThisIsDeceased = iif({Deceased?}=='Yes','TRUE','FALSE'),",
						"          UseThisContactType = iif(isNull(CompanyName),'Household','Organization'),",
						"          UseThisFirstName = iifNull(FirstName, \"\"),",
						"          UseThisLastName = iifNull(LastName, \"\"),",
						"          UseThisIsPrivate = iif(\r",
						"    and(\r",
						"        like(Remarks, '%anonymous%')\r",
						"        ,not(like(Remarks, '%not anonymous%'))\r",
						"    )\r",
						"    ,'TRUE'\r",
						"    ,'FALSE'\r",
						"),",
						"          UseThisContactName = concat(\r",
						"    iif(\r",
						"        isNull(FirstName)\r",
						"        ,\"\"\r",
						"        ,concat(\r",
						"            FirstName\r",
						"            , iif(\r",
						"                isNull(LastName)\r",
						"                ,\"\"\r",
						"                ,\" \")\r",
						"        )\r",
						"    )\r",
						"    , iif(\r",
						"        isNull(LastName)\r",
						"        , \"\"\r",
						"        , LastName\r",
						"    )\r",
						")) ~> CheckingAndDeriving",
						"MockContactsTable, StateAbbreviations lookup(State == StateAbbreviation,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupMockContactState",
						"DeriveAnomalyData filter(not(\r",
						"    equals(\r",
						"    iifNull( IdentifyingColumn, \"\")\r",
						"    , \"\"\r",
						"    )\r",
						")) ~> RemoveGoodRows",
						"CheckingAndDeriving derive(ConcatenatedRowData = concat(\r",
						"    \"Number:\"\r",
						"    , Number\r",
						"    , \"|CompanyName:\"\r",
						"    , iifNull( CompanyName, \"NULL\")\r",
						"    , \"|FirstName:\"\r",
						"    , iifNull( FirstName, \"NULL\")\r",
						"    , \"|LastName:\"\r",
						"    , iifNull( LastName, \"NULL\")\r",
						"    , \"|Street:\"\r",
						"    , iifNull( Street, \"NULL\")\r",
						"    , \"|City:\"\r",
						"    , iifNull( City, \"NULL\")\r",
						"    , \"|State:\"\r",
						"    , iifNull( State, \"NULL\")\r",
						"    , \"|Postal:\"\r",
						"    , iifNull( Postal, \"NULL\")\r",
						"    , \"|Phone:\"\r",
						"    , iifNull( Postal, \"NULL\")\r",
						"    , \"|Phone:\"\r",
						"    , iifNull( Phone, \"NULL\")\r",
						"    , \"|EMail:\"\r",
						"    , iifNull( EMail, \"NULL\")\r",
						"    , \"|Remarks:\"\r",
						"    , iifNull( Remarks, \"NULL\")\r",
						"    , \"|Deceased:\"\r",
						"    , iifNull( {Deceased?}, \"NULL\")\r",
						"    , \"|SourceFilename:\"\r",
						"    , iifNull( SourceFilename, \"NULL\")\r",
						"),",
						"          IdentifyingColumn = concat(\r",
						"    iif(\r",
						"        or(\r",
						"            isNull(FirstName)\r",
						"            , isNull(LastName)\r",
						"        )\r",
						"        , \"FirstNameOrLastName|\"\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        or(\r",
						"            and(\r",
						"                equals(\r",
						"                    iifNull(UseThisPostalCode,\"\")\r",
						"                    , \"\"\r",
						"                )\r",
						"                , length(\r",
						"                    concat(\r",
						"                        iifNull(Street, \"\")\r",
						"                        , iifNull(City, \"\")\r",
						"                        , iifNull(StateAbbreviation, \"\")\r",
						"                    )\r",
						"                ) > 0\r",
						"            )\r",
						"            , not(\r",
						"            equals(Postal, UseThisPostalCode)\r",
						"            )\r",
						"        )\r",
						"        , \"Postal|\"\r",
						"        , \"\")\r",
						"    , iif(\r",
						"        UseThisIsPrivate == \"TRUE\"\r",
						"        , \"Remarks|\"\r",
						"        , \"\")\r",
						"),",
						"          IdentifyingValue = concat(\r",
						"    iif(\r",
						"        or(\r",
						"            isNull(FirstName)\r",
						"            , isNull(LastName)\r",
						"        )\r",
						"        , concat(\r",
						"            iifNull(FirstName, \"NULL\")\r",
						"            , \":\"\r",
						"            , iifNull(LastName, \"NULL\")\r",
						"            , \"|\"\r",
						"        )\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        or(\r",
						"            and(\r",
						"                equals(\r",
						"                    iifNull(UseThisPostalCode,\"\")\r",
						"                    , \"\"\r",
						"                )\r",
						"                , length(\r",
						"                    concat(\r",
						"                        iifNull(Street, \"\")\r",
						"                        , iifNull(City, \"\")\r",
						"                        , iifNull(StateAbbreviation, \"\")\r",
						"                    )\r",
						"                ) > 0\r",
						"            )\r",
						"            , not(\r",
						"            equals(Postal, UseThisPostalCode)\r",
						"            )\r",
						"        )\r",
						"        , concat(\r",
						"            iifNull(Postal, \"NULL\")\r",
						"            , \"|\"\r",
						"        )\r",
						"        , \"\"\r",
						"    )\r",
						"    , iif(\r",
						"        UseThisIsPrivate == \"TRUE\"\r",
						"        , iifNull(Remarks, \"NULL\")\r",
						"        , \"\"\r",
						"    )\r",
						")) ~> DeriveAnomalyData",
						"CheckingAndDeriving sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          LegacyContactId as string,",
						"          ContactType as string,",
						"          ContactName as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          HomePhone as string,",
						"          HomeEmail as string,",
						"          Address1 as string,",
						"          City as string,",
						"          State as string,",
						"          PostalCode as string,",
						"          IsPrivate as string,",
						"          IsDeceased as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          LegacyContactId = Number,",
						"          ContactType = UseThisContactType,",
						"          ContactName = UseThisContactName,",
						"          FirstName = UseThisFirstName,",
						"          LastName = UseThisLastName,",
						"          HomePhone = Phone,",
						"          HomeEmail = EMail,",
						"          Address1 = Street,",
						"          City,",
						"          State,",
						"          PostalCode = UseThisPostalCode,",
						"          IsPrivate = UseThisIsPrivate,",
						"          IsDeceased = UseThisIsDeceased",
						"     )) ~> VirtuousContacts",
						"RemoveGoodRows sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          IdentifyingColumnName as string,",
						"          ColumnValue as string,",
						"          ConcatenatedRowData as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          IdentifyingColumnName = IdentifyingColumn,",
						"          ColumnValue = IdentifyingValue,",
						"          ConcatenatedRowData",
						"     )) ~> AnomalyLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MockData_SQL_DB_Contacts')]",
				"[concat(variables('factoryId'), '/datasets/USStateAbbreviations')]",
				"[concat(variables('factoryId'), '/datasets/Virtuous_Contacts_Table')]",
				"[concat(variables('factoryId'), '/datasets/AnomalyLog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureDataLakeStorage420')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureDataLakeStorage420_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureDataLakeStorage420_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabase7')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabase7_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabase7_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}